#include <easyx.h>
#include <stdio.h>
#include <conio.h>
#include <time.h>
#include <cstdlib>

#define node_width 20

typedef struct {
    int x;
    int y;
}node;
//绘制网格
void paintGrid()
{
    for (int y = 0; y < 600; y += node_width)//横
    {
        line(0, y, 800, y);
    }
    for (int x = 0; x < 800; x += node_width)//竖
    {
        line(x, 0, x, 600);
    }
}
//绘制蛇
void paintSnake(node* snake, int n)
{
    for (int i = 0; i < n; i++)
    {
        int left = snake[i].x * node_width;//计算节点左侧横坐标
        int top = snake[i].y * node_width;//顶  纵
        int right = (snake[i].x + 1) * node_width;//右  横
        int bottom = (snake[i].y + 1) * node_width;//底  纵
        solidrectangle(left, top, right, bottom);//实心矩形
    }
}
//枚举蛇的移动方向
enum direction
{
    eUp,
    eDown,
    eLeft,
    eRight
};
//移动蛇
node snakeMove(node* snake, int length, enum direction direction)
{
    node tail = snake[length - 1];
    for (int i = length - 1; i > 0; i--)
    {
        snake[i] = snake[i - 1];
    }

    node newHead = snake[0];
    if (direction == eUp)
    {
        newHead.y--;
    }
    else if (direction == eDown)
    {
        newHead.y++;
    }
    else if (direction == eLeft)
    {
        newHead.x--;
    }
    else //  right
    {
        newHead.x++;
    }

    snake[0] = newHead;
    return tail;
}
//改变蛇的移动方向
void changeDirection(enum direction* direction)
{
    if (_kbhit() != 0)
    {
        char c = _getch();
        switch (c)
        {
            case 'w':
                if (*direction != eDown)
                    *direction = eUp;
                break;
            case 's':
                if (*direction != eUp)
                    *direction = eDown;
                break;
            case 'a':
                if (*direction != eRight)
                    *direction = eLeft;
                break;
            case 'd':
                if (*direction != eLeft)
                    *direction = eRight;
                break;
        }
    }
}
//绘制食物
void paintFood(node food)
{
    int left = food.x * node_width;
    int top = food.y * node_width;
    int right = (food.x + 1) * node_width;
    int bottom = (food.y + 1) * node_width;
    setfillcolor(YELLOW);
    solidrectangle(left, top, right, bottom);
    setfillcolor(WHITE);
}
//生成食物
node createFood(node* snake, int length)
{
    node food;
    while (1)
    {
        food.x = rand() % (800 / node_width);
        food.y = rand() % (600 / node_width);

        int i;
        for (i = 0; i < length; i++)
        {
            if (snake[i].x == food.x && snake[i].y == food.y)
            {
                break;
            }
        }
        if (i < length)
            continue;
        else
            break;
    }
    return food;
}

int main()
{
    initgraph(800, 600);  // 设置背景色
    setbkcolor(RGB(184, 425, 205));  // 使用背景色清空窗口
    cleardevice();

    node snake[100] = { {5, 7}, {4, 7}, {3, 7}, {2, 7}, {1, 7} };
    int length = 5;
    enum direction d = eRight;  // 蛇的初始移动方向为向右

    srand(static_cast<unsigned int>(time(NULL)));
    node food = createFood(snake, length);

    // 自动化蛇的简单行为：朝着食物的方向移动
    auto moveTowardsFood = [&](enum direction & dir) {
        if (food.y < snake[0].y && dir != eDown)//如果食物在蛇的上方，并且蛇当前不是向下移动，则蛇向上移动
            dir = eUp;
        else if (food.y > snake[0].y && dir != eUp)//如果食物在蛇的下方，并且蛇当前不是向上移动，则蛇向下移动
            dir = eDown;
        else if (food.x < snake[0].x && dir != eRight)
            dir = eLeft;
        else if (food.x > snake[0].x && dir != eLeft)
            dir = eRight;
    };

    while (1)
    {
        cleardevice();
        paintGrid();
        paintSnake(snake, length);
        paintFood(food);
        Sleep(100);  // 控制速度

        moveTowardsFood(d);  // 具体移动方向的决定代码

        // 移动蛇
        node lastTail = snakeMove(snake, length, d);
        if (snake[0].x == food.x && snake[0].y == food.y)
        {
            if (length < sizeof(snake) / sizeof(snake[0])) // 确保不会超过蛇数组的大小
            {
                snake[length] = lastTail;  // 吃到食物，蛇长加1
                length++;
            }
            food = createFood(snake, length);  // 生成新食物
        }

        // 检查是否撞到墙或自己
        if (snake[0].x < 0 || snake[0].x >= 800 / node_width || snake[0].y < 0 || snake[0].y >= 600 / node_width)
        {
            MessageBox(GetHWnd(), _T("Game Over: Snake hit the wall!"), _T("Game Over"), MB_OK);
            break;  // 撞墙，游戏结束
        }
        for (int i = 1; i < length; i++)
        {
            if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
            {
                MessageBox(GetHWnd(), _T("Game Over: Snake bit itself!"), _T("Game Over"), MB_OK);
                break;  // 吃到自己，游戏结束
            }
        }
    }

    _getch();  
    closegraph();  
    return 0;
}